# 9020 : 골드바흐의 추측
# https://www.acmicpc.net/problem/9020
# 근데, 골드바흐의 추측에서 중간점으로부터 같은 수가 차이난다는 특징이....맞나??

def sosu(arg):
    if arg == 1: # 1은 소수가 아니므로 제외
        return False
    for j in range(2, int(arg**0.5) + 1): # 모든 수를 보지 않고, 해당 수의 제곱근까지만 나눠본다.
        if arg % j == 0: #약수가 존재하므로 소수가 아님
            return False      #더이상 검사할 필요가 없으므로 멈춤
    else:
        return True # 만약 나눠지지 않을 경우, 해당 수는 소수임!

T = int(input())

for i in range(0, T) : # T번의 시도
    number = int(input())
    # 에라토스테네스의 체 - sosu 함수 사용
    a, b = number//2, number//2 # 중간 지점부터 시작, 소수가 나올 경우 차가 최소인 경우를 우선적으로 찾기 위함
    while a > 0: # a, b 중 a를 감소시키기 때문에 a가 음수가 되지 않는 선에서 계속 실행
        if sosu(a) and sosu(b): # 둘다 만약 소수이면...
            print(a, b)
            break
        else: # 중간점에서 같은 거리만큼 숫자를 벌려놓고, 그 숫자가 만약 소수이면 중단
            a -= 1
            b += 1


"""
2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다는 것. 이러한 수를 골드바흐 수라 함
또, 짝수를 두 소수의 합으로 나타내는 표현을 그 수의 골드바흐 파티션이라 함
10000보다 작거나 같은 모든 짝수 n에 대한 골드바흐 파티션은 존재한다.
2보다 큰 짝수 n이 주어졌을 때, n의 골드바흐 파티션을 출력하는 프로그램을 작성하시오.
만약 가능한 n의 골드바흐 파티션이 여러 가지인 경우에는 두 소수의 차이가 가장 작은 것을 출력

첫째 줄에 테스트 케이스의 개수 T
각 테스트 케이스는 한 줄로 이루어져 있고 짝수 n이 주어진다.
각 테스트 케이스에 대해서 주어진 n의 골드바흐 파티션을 출력
출력하는 소수는 작은 것부터 먼저 출력하며, 공백으로 구분한다.
"""