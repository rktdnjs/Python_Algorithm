# BFS : Breadth First Search (너비 우선 탐색)
# 선입 선출 방식인 큐 자료구조를 이용하는 것이 정석

# 1. 탐색 시작 노드를 큐에 삽입하고 방문 처리
# 2. 큐에서 노드를 꺼내 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리
# 3. 2번의 과정을 더 이상 수행할 수 없을 때까지 반복함

# 인접한 노드가 여러 개 있을 경우 숫자가 작은 노드부터 먼저 큐에 삽입
# BFS는 큐 자료구조에 기초한다는 점에서 구현이 간단하다는 특징이 존재
# BFS 구현에는 파이썬 기준 deque 라이브러리를 사용하는 것이 좋으며 탐색을 수행함에 있어 O(N)의 시간이 소요된다.
# 일반적인 경우 실제 수행 시간은 DFS보다 좋은 편이라는 점까지만 추가로 기억!

from collections import deque

# BFS 메서드 정의
def bfs(graph, start, visited):
    # 큐 구현을 위해 deque 라이브러리 사용
    queue = deque([start])
    # 현재 노드를 방문 처리
    visited[start] = True
    # 큐가 빌 때까지 반복
    while queue:
        # 큐에서 하나의 원소를 뽑아 출력
        v = queue.popleft()
        print(v, end=' ')
        # 해당 원소와 연결된, 아직 방문하지 않은 원소들을 큐에 삽입
        # 새롭게 방문한 원소를 방문 처리하고 계속해서 큐가 빌 때 까지 진행
        for i in graph[v]:
            if not visited[i]:
                queue.append(i)
                visited[i] = True
# 결과 : 1 2 3 8 7 4 5 6 

# 각 노드가 연결된 정보를 리스트 자료형으로 표현(2차원 리스트)
graph = [
    [],
    [2, 3, 8],  # 1번 노드(의 연결 노드)
    [1, 7],     # 2번 노드
    [1, 4, 5],  # 3번 노드
    [3, 5],     # 4번 노드
    [3, 4],     # 5번 노드
    [7],        # 6번 노드
    [2, 6, 8],  # 7번 노드
    [1, 7]      # 8번 노드
]

# 각 노드가 방문된 정보를 리스트로 표현(1차원 리스트)
# False = 방문하지 않음
visited = [False] * 9

# 정의된 DFS 함수 호출
# 시작 노드를 1로 설정하여 DFS 호출
bfs(graph, 1, visited)