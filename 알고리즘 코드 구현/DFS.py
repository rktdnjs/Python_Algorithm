# DFS : Depth-First Search (깊이 우선 탐색)

# 프로그래밍에서 그래프는 크게 2가지 방식으로 표현할 수 있음
# 1. 인접 행렬 방식(Adjacency Matrix) : 2차원 배열로 그래프의 연결 관계를 표현하는 방식
# 2. 인접 리스트(Adjacency List) : 리스트로 그래프의 연결 관계를 표현하는 방식

# 인접 행렬 방식 : 2차원 배열에 각 노드가 연결된 형태를 모두 기록하는 방식
# 연결이 되어 있지 않은 노드끼리는 무한(Infinity)의 비용이라고 작성
# 인접 리스트 방식 : 모든 노드에 연결된 노드에 대한 정보를 차례대로 연결하여 저장

# DFS는 '스택 자료 구조'를 이용하며 구체적인 동작 과정은 다음과 같다.
# 1. 탐색 시작 노드를 스택에 삽입하고 방문 처리
# 2. 스택의 최상단 노드에 방문하지 않은 인접 노드가 있으면 해당 인접 노드를 스택에 넣고 방문 처리
# 3. 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다.
# 4. 2-3 번의 과정을 더 이상 수행할 수 없을 때 까지 반복
# * 관행적으로 번호가 낮은 순서부터 처리한다

# DFS 메서드 정의
def dfs(graph, v, visited):
    # 현재 노드를 방문 처리함
    visited[v] = True
    print(v, end=' ')
    # 현재 노드와 연결된 다른 노드를 재귀적으로 방문
    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i, visited)
# 결과 : 1 2 7 6 8 3 4 5

# 각 노드가 연결된 정보를 리스트 자료형으로 표현(2차원 리스트)
graph = [
    [],
    [2, 3, 8],  # 1번 노드(의 연결 노드)
    [1, 7],     # 2번 노드
    [1, 4, 5],  # 3번 노드
    [3, 5],     # 4번 노드
    [3, 4],     # 5번 노드
    [7],        # 6번 노드
    [2, 6, 8],  # 7번 노드
    [1, 7]      # 8번 노드
]

# 각 노드가 방문된 정보를 리스트로 표현(1차원 리스트)
# False = 방문하지 않음
visited = [False] * 9

# 정의된 DFS 함수 호출
# 시작 노드를 1로 설정하여 DFS 호출
dfs(graph, 1, visited)